# Environment variables:
# 	TS_IPV4				the IPv4 address of the Tailscale node this container runs on
#	TS_IPV6				the IPv6 address of the Tailscale node this container runs on
#	TLD					the desired TLD this resolver will resolve
#	DEVICE_SUBDOMAIN	the subdomain wherein devices will be resolved (`devices`)
#	DEVICE_TRANSFORM	what to transform device domains to
#	SERVICE_SUBDOMAIN	the subdomain wherein services will be resolved (`services`)
#	SERVICE_TRANSFORM	what to transform service domains to

# Device resolver: {input}.{devices}.{tld}
{$DEVICE_SUBDOMAIN}.{$TLD}:53 {
	# Reload Corefile every 5s.
	reload 5s

	# Enable verbose logging.
	log
	debug
	errors
	
	# Cache results for 300 seconds (5 minutes).
	#cache 300
	
	# Bind only to loopback and Tailscale IP addresses.
	bind 127.0.0.1
	bind ::1
	bind {$TS_IPV4}
	bind {$TS_IPV6}
	
	# Rewrite {name}.{$DEVICE_SUBDOMAIN}.{$TLD} to {name}.{$DEVICE_TRANSFORM}
	rewrite continue {
		name regex (.+).{$DEVICE_SUBDOMAIN}.{$TLD}.$ {1}.{$DEVICE_TRANSFORM}.
		answer name (.+).{$DEVICE_TRANSFORM}. {1}.{$DEVICE_SUBDOMAIN}.{$TLD}.
	}
	
	# Delegate device name resolution to Tailscale MagicDNS.
	forward . dns://100.100.100.100
}

# Device transformer: {name}.{tld} to {name}.{devices}.{tld}
.:5301 {
	bind 127.0.0.1
	bind ::1
	
	log
	debug
	errors

	rewrite continue {
		name regex (.+).{$TLD}.$ {1}.{$DEVICE_SUBDOMAIN}.{$TLD}.
		answer name (.+).{$DEVICE_SUBDOMAIN}.{$TLD}.$ {1}.{$TLD}.
	}
	
	forward . dns://127.0.0.1
}

# Service resolver: {input}.{services}.{tld}
{$SERVICE_SUBDOMAIN}.{$TLD}:53 {
	reload 5s
	
	log
	debug
	errors

	bind 127.0.0.1
	bind ::1
	bind {$TS_IPV4}
	bind {$TS_IPV6}
	
	# Rewrite {name}.{$SERVICE_TRANSFORM}.{$TLD} to {name}.{$SERVICE_TRANSFORM}.{$TLD}.me
	# (Managed in Cloudflare, public DNS but links to private IPs)
	rewrite continue {
			name regex (.+).{$SERVICE_TRANSFORM}.{$TLD}.$ {1}.{$SERVICE_TRANSFORM}.{$TLD}.me.
			answer name (.+).{$SERVICE_TRANSFORM}.{$TLD}.me. {1}.{$SERVICE_TRANSFORM}.{$TLD}.
	}

	# Delegate service name resolution to Cloudflare.
	forward . tls://1.1.1.1 tls://1.0.0.1 {
		tls_servername cloudflare-dns.com
	}
}

# Service transformer: {input}.{tld} to {input}.{services}.{tld}
.:5302 {
	bind 127.0.0.1
	bind ::1
	
	log
	debug
	errors

	rewrite continue {
		name regex (.+).{$TLD}.$ {1}.{$SERVICE_TRANSFORM}.{$TLD}.
		answer name (.+).{$SERVICE_TRANSFORM}.{$TLD}.$ {1}.{$TLD}.
	}
	
	forward . dns://127.0.0.1
}

# Disambiguating TLD resolver: {name}.{tld}
#	=> Tries to resolve {name}.{services}.{tld}, with fallthrough
# 	=> Tries to resolve {name}.{devices}.{tld}, with fallthrough
{$TLD}:53 {
	reload 5s
	
	log
	debug
	errors

	bind 127.0.0.1
	bind ::1
	bind {$TS_IPV4}
	bind {$TS_IPV6}

	# 1. Forward to the service transformer.
	forward {$TLD} dns://127.0.0.1:5302
	
	# 2. Service resolution fails => NXDOMAIN is returned
	# 	 Next, we try the device transformer. 
	alternate original NXDOMAIN dns://127.0.0.1:5302

	# 3. Device transformer fails.
	#    Do nothing.
}

# Local and internal ingress -- unsecured
.:53 {
	reload 5s
	
	log
	debug
	errors

	bind 127.0.0.1
	bind ::1
	bind {$TS_IPV4}
	bind {$TS_IPV6}

	# Rewrite {name}. (without TLD!) to {name}.{$TLD}.
	# This is effectively mimicking a search.
	rewrite continue {
			name regex ^([^.]+).$ {1}.{$TLD}.
			answer name (.+).{$TLD}.$ {1}.
	}

	# Forward hostname-only to the {$TLD} zone.
	forward {$TLD} 127.0.0.1:5301 127.0.0.1:5302
	
	# Forward everything else to Cloudflare.
	forward . tls://1.1.1.1 tls://1.0.0.1 {
			tls_servername cloudflare-dns.com
	}
}	

# Public ingress (TLS) -- secured 
tls://. {
	log
	errors
	debug

	tls /etc/coredns/cert.crt /etc/coredns/cert.pem {
		client_auth nocert
	}

	forward . dns://127.0.0.1
}

# Public ingress (HTTPS) -- secured
https://. {
	log
	errors
	debug
	
	tls /etc/coredns/cert.crt /etc/coredns/cert.pem {
		client_auth nocert
	}

	forward . dns://127.0.0.1
}
